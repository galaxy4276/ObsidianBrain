/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutomaticTagsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  tags: {}
};
var AutomaticTagsPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new AutomaticTagsSettingTab(this.app, this));
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.vault.on("create", async (file) => {
        if (Object.entries(this.settings.tags).length === 0)
          return;
        if (file instanceof import_obsidian.TFile) {
          this.tagFile(file);
        }
      }));
    });
    this.addCommand({
      id: "add-tags",
      name: "Add tags to existing notes",
      callback: async () => {
        this.app.vault.getMarkdownFiles().forEach((file) => {
          this.tagFile(file);
        });
      }
    });
  }
  async tagFile(file) {
    const tags = [];
    Object.entries(this.settings.tags).forEach(([k, v]) => {
      if (this.matchesGlob(file.path, k)) {
        tags.push(...v);
      }
    });
    if (tags.length === 0)
      return;
    await this.app.fileManager.processFrontMatter(file, (fm) => {
      fm.tags = [.../* @__PURE__ */ new Set([...fm.tags || [], ...tags])];
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  matchesGlob(path, glob) {
    const regex = glob.replace(/\./g, "\\.").replace(/\*/g, ".*").replace(/\//g, "\\/");
    return new RegExp(regex).test(path);
  }
};
var AutomaticTagsSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Tags").setDesc("Tags to be automatically added to notes, in a simplified glob format").addTextArea(
      (area) => area.setValue(this.getTagsString()).setPlaceholder(
        "*: all\nfolder/subfolder: tag1, tag2\nother/folder: tag3"
      ).onChange(async (newValue) => {
        this.setTagsString(newValue);
        await this.plugin.saveSettings();
      })
    );
  }
  getTagsString() {
    let result = "";
    Object.entries(this.plugin.settings.tags).forEach(([k, v]) => {
      result += `${k}: ${v.join(", ")}
`;
    });
    return result;
  }
  setTagsString(value) {
    const result = {};
    for (const line of value.split("\n")) {
      if (line.trim().length === 0)
        continue;
      const key = line.split(":")[0];
      result[key.trim()] = line.substring(key.length + 1).split(",").map((v) => v.trim());
    }
    this.plugin.settings.tags = result;
  }
};
